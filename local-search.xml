<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ubuntu 24.04 完整Docker安装指南：从零配置到实战命令大全</title>
    <link href="/echo-silence/posts/b5a0661a.html"/>
    <url>/echo-silence/posts/b5a0661a.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装-Docker"><a href="#1-安装-Docker" class="headerlink" title="1. 安装 Docker"></a>1. 安装 Docker</h2><blockquote><p><a href="https://docs.docker.com/engine/install/">官方安装文档</a></p></blockquote><p>以下以 <code>Ubuntu24.04</code> 为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加 Docker 仓库的 GPG 密钥</span><br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install ca-certificates curl<br><span class="hljs-built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings<br><span class="hljs-built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc<br><br><span class="hljs-comment"># 添加 Docker 仓库到 apt 源</span><br><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu <span class="hljs-subst">$(. /etc/os-release &amp;&amp; echo <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;UBUNTU_CODENAME:-<span class="hljs-variable">$VERSION_CODENAME</span>&#125;</span>&quot;</span>)</span> stable&quot;</span> | \<br>  <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><br><span class="hljs-built_in">sudo</span> apt-get update<br><br><span class="hljs-comment"># 安装 Docker 以及 Docker Compose</span><br><span class="hljs-built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br><br><span class="hljs-comment"># 验证安装</span><br><span class="hljs-comment"># 可能出现以下提示，需要先配置 Docker 镜像加速器</span><br><span class="hljs-comment"># Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="hljs-comment"># docker: Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="hljs-built_in">sudo</span> docker run hello-world<br></code></pre></td></tr></table></figure><h2 id="2-配置-Docker-镜像加速器"><a href="#2-配置-Docker-镜像加速器" class="headerlink" title="2. 配置 Docker 镜像加速器"></a>2. 配置 Docker 镜像加速器</h2><h3 id="2-1-配置-Docker-镜像源"><a href="#2-1-配置-Docker-镜像源" class="headerlink" title="2.1 配置 Docker 镜像源"></a>2.1 配置 Docker 镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span>,<br>        <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span>,<br>        <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>        <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>    <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;10m&quot;</span>,<br>        <span class="hljs-string">&quot;max-file&quot;</span>: <span class="hljs-string">&quot;3&quot;</span><br>    &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>注：</p><ul><li><code>log-driver</code>：指定 <code>Docker</code> 容器使用 <code>Json</code> 文件作为日志存储格式</li><li><code>log-opts</code>：指定日志文件大小和数量，超过限制时自动清理<ul><li><code>max-size</code>：单个日志文件最大大小（支持 k（千字节）、m（兆字节）、g（千兆字节））</li><li><code>max-file</code>：保留的日志文件数量</li></ul></li></ul><h3 id="2-2-重启-Docker-服务"><a href="#2-2-重启-Docker-服务" class="headerlink" title="2.2 重启 Docker 服务"></a>2.2 重启 Docker 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="3-Docker-常用命令"><a href="#3-Docker-常用命令" class="headerlink" title="3. Docker 常用命令"></a>3. Docker 常用命令</h2><h3 id="3-1-Docker-常用命令速查表"><a href="#3-1-Docker-常用命令速查表" class="headerlink" title="3.1 Docker 常用命令速查表"></a>3.1 Docker 常用命令速查表</h3><h4 id="3-1-1-容器管理"><a href="#3-1-1-容器管理" class="headerlink" title="3.1.1 容器管理"></a>3.1.1 容器管理</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker run -it --name my_container image:tag</code></td><td>创建并运行容器（交互式）</td></tr><tr><td><code>docker run -d --name my_container image:tag</code></td><td>后台运行容器</td></tr><tr><td><code>docker start/stop/restart my_container</code></td><td>启动&#x2F;停止&#x2F;重启容器</td></tr><tr><td><code>docker exec -it my_container /bin/bash</code></td><td>进入运行中的容器</td></tr><tr><td><code>docker rm my_container</code></td><td>删除容器</td></tr><tr><td><code>docker rm -f my_container</code></td><td>强制删除运行中的容器</td></tr><tr><td><code>docker ps</code></td><td>查看运行中的容器</td></tr><tr><td><code>docker ps -a</code></td><td>查看所有容器（包括已停止的）</td></tr><tr><td><code>docker logs my_container</code></td><td>查看容器日志</td></tr><tr><td><code>docker logs -f my_container</code></td><td>实时查看日志（类似 <code>tail -f</code>）</td></tr></tbody></table><h4 id="3-1-2-镜像管理"><a href="#3-1-2-镜像管理" class="headerlink" title="3.1.2 镜像管理"></a>3.1.2 镜像管理</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker pull image:tag</code></td><td>拉取镜像</td></tr><tr><td><code>docker images</code></td><td>查看本地镜像</td></tr><tr><td><code>docker rmi image:tag</code></td><td>删除镜像</td></tr><tr><td><code>docker build -t my_image:tag .</code></td><td>构建镜像（基于当前目录的 <code>Dockerfile</code>）</td></tr><tr><td><code>docker save -o my_image.tar image:tag</code></td><td>导出镜像为 <code>.tar</code> 文件</td></tr><tr><td><code>docker load -i my_image.tar</code></td><td>从 <code>.tar</code> 文件导入镜像</td></tr></tbody></table><h4 id="3-1-3-网络管理"><a href="#3-1-3-网络管理" class="headerlink" title="3.1.3 网络管理"></a>3.1.3 网络管理</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker network ls</code></td><td>查看所有网络</td></tr><tr><td><code>docker network create my_network</code></td><td>创建自定义网络</td></tr><tr><td><code>docker network inspect my_network</code></td><td>查看网络详情</td></tr><tr><td><code>docker run --network=my_network ...</code></td><td>指定容器使用的网络</td></tr></tbody></table><h4 id="3-1-4-数据卷管理"><a href="#3-1-4-数据卷管理" class="headerlink" title="3.1.4 数据卷管理"></a>3.1.4 数据卷管理</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker volume ls</code></td><td>查看所有数据卷</td></tr><tr><td><code>docker volume create my_volume</code></td><td>创建数据卷</td></tr><tr><td><code>docker run -v my_volume:/path/in/container ...</code></td><td>挂载数据卷到容器</td></tr><tr><td><code>docker run -v /host/path:/container/path ...</code></td><td>挂载主机目录到容器</td></tr></tbody></table><h4 id="3-1-5-容器资源管理"><a href="#3-1-5-容器资源管理" class="headerlink" title="3.1.5 容器资源管理"></a>3.1.5 容器资源管理</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker stats</code></td><td>查看容器资源占用（CPU&#x2F;内存&#x2F;网络）</td></tr><tr><td><code>docker top my_container</code></td><td>查看容器内的进程</td></tr><tr><td><code>docker update --memory 512M my_container</code></td><td>限制容器内存</td></tr></tbody></table><h4 id="3-1-6-Docker-Compose（容器编排）"><a href="#3-1-6-Docker-Compose（容器编排）" class="headerlink" title="3.1.6 Docker Compose（容器编排）"></a>3.1.6 Docker Compose（容器编排）</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose up -d</code></td><td>启动 <code>docker-compose.yml</code> 定义的服务</td></tr><tr><td><code>docker-compose down</code></td><td>停止并删除所有容器</td></tr><tr><td><code>docker-compose logs -f</code></td><td>查看所有服务的日志</td></tr><tr><td><code>docker-compose ps</code></td><td>查看运行中的服务</td></tr></tbody></table><h4 id="3-1-7-清理与维护"><a href="#3-1-7-清理与维护" class="headerlink" title="3.1.7 清理与维护"></a>3.1.7 清理与维护</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker system df</code></td><td>查看 Docker 磁盘使用情况</td></tr><tr><td><code>docker system prune</code></td><td>清理未使用的容器&#x2F;镜像&#x2F;网络</td></tr><tr><td><code>docker system prune -a</code></td><td>彻底清理（包括未使用的镜像）</td></tr></tbody></table><h3 id="3-2-常用组合命令"><a href="#3-2-常用组合命令" class="headerlink" title="3.2 常用组合命令"></a>3.2 常用组合命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除所有停止的容器</span><br>docker container prune<br><br><span class="hljs-comment"># 删除所有未使用的镜像</span><br>docker image prune -a<br><br><span class="hljs-comment"># 查看容器 IP 地址</span><br>docker inspect -f <span class="hljs-string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> my_container<br><br><span class="hljs-comment"># 批量停止所有容器</span><br>docker stop $(docker ps -aq)<br><br><span class="hljs-comment"># 批量删除所有容器</span><br>docker <span class="hljs-built_in">rm</span> $(docker ps -aq)<br></code></pre></td></tr></table></figure><h3 id="3-3-常见问题"><a href="#3-3-常见问题" class="headerlink" title="3.3 常见问题"></a>3.3 常见问题</h3><h4 id="3-3-1-如何修改容器配置？"><a href="#3-3-1-如何修改容器配置？" class="headerlink" title="3.3.1 如何修改容器配置？"></a>3.3.1 如何修改容器配置？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改容器配置（如端口映射）</span><br>docker update --restart=always my_container<br>docker update --publish-add 8080:80 my_container<br></code></pre></td></tr></table></figure><h4 id="3-3-2-如何查看容器占用的端口？"><a href="#3-3-2-如何查看容器占用的端口？" class="headerlink" title="3.3.2 如何查看容器占用的端口？"></a>3.3.2 如何查看容器占用的端口？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker port my_container<br></code></pre></td></tr></table></figure><h4 id="3-3-3-如何查看-Docker-版本？"><a href="#3-3-3-如何查看-Docker-版本？" class="headerlink" title="3.3.3 如何查看 Docker 版本？"></a>3.3.3 如何查看 Docker 版本？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker --version<br>docker info<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>告别ModuleNotFoundError！VSCode中Python项目正确设置源码根目录的4种方法</title>
    <link href="/echo-silence/posts/9e4c4811.html"/>
    <url>/echo-silence/posts/9e4c4811.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-项目目录结构"><a href="#1-项目目录结构" class="headerlink" title="1. 项目目录结构"></a>1. 项目目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">TEST_ROOT<br>├── .env<br>├── .vscode<br>│   └── launch.json<br>│   └── settings.json<br>├── folder_A<br>├── folder_B<br>│   ├── b1<br>│   │   ├── __init__.py<br>│   │   ├── utils.py<br>│   ├── b2<br>│   │   ├── __init__.py<br>│   │   ├── test.py<br></code></pre></td></tr></table></figure><h2 id="2-问题场景"><a href="#2-问题场景" class="headerlink" title="2. 问题场景"></a>2. 问题场景</h2><p>以上目录在 VSCode 中，<code>folder_A</code> 和 <code>folder_B</code> 会被看作两个不同的工作区， VSCode 会<strong>默认将 <code>TEST_ROOT</code> 作为源代码根目录</strong>。此时，在 <code>folder_B</code> 中，<code>b1</code> 和 <code>b2</code> 中的模块无法相互导入。如果在 <code>b2</code> <code>test.py</code> 中引用 <code>b1</code> <code>utils.py</code> 中的常量或函数，会报错 <code>ModuleNotFoundError: No module named &#39;b1&#39;</code>。</p><h2 id="3-Pycharm-解决方案"><a href="#3-Pycharm-解决方案" class="headerlink" title="3. Pycharm 解决方案"></a>3. Pycharm 解决方案</h2><p>众所周知，在 Pycharm 中，只需要在 <code>folder_B</code> 上右键，选择 <code>Mark Directory as</code> -&gt; <code>Sources Root</code> 即可，非常方便。</p><h2 id="4-VSCode-解决方案"><a href="#4-VSCode-解决方案" class="headerlink" title="4. VSCode 解决方案"></a>4. VSCode 解决方案</h2><p>但是在 VSCode 中，并没有如此快捷方便的操作，搜索资料后都提示需要手动修改配置文件。于是，尝试了以下解决方案，特此记录。</p><h3 id="4-1（方案一）修改项目配置文件【失败】"><a href="#4-1（方案一）修改项目配置文件【失败】" class="headerlink" title="4.1（方案一）修改项目配置文件【失败】"></a>4.1（方案一）修改项目配置文件【失败】</h3><p>在根目录 <code>TEST_ROOT</code> 下 <code>.vscode/settings.json</code> 文件中添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;python.pythonPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;python.autoComplete.extraPaths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/folder_B&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;python.analysis.extraPaths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/folder_B&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;python.analysis.autoSearchPaths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>配置解释</p><ul><li><code>&quot;python.pythonPath&quot;</code>：指定 Python 解释器的路径。</li><li><code>&quot;python.autoComplete.extraPaths&quot;</code>：指定自动补全时搜索的路径。</li><li><code>&quot;python.analysis.extraPaths&quot;</code>：指定静态分析时搜索的路径。</li><li><code>&quot;python.analysis.autoSearchPaths&quot;</code>：自动搜索路径。</li></ul><h3 id="4-2（方案二）修改项目启动配置文件【失败】"><a href="#4-2（方案二）修改项目启动配置文件【失败】" class="headerlink" title="4.2（方案二）修改项目启动配置文件【失败】"></a>4.2（方案二）修改项目启动配置文件【失败】</h3><p>在根目录 <code>TEST_ROOT</code> 下 <code>.vscode/launch.json</code> 文件中添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Python 调试程序: 当前文件&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;debugpy&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;console&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integratedTerminal&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/folder_B&quot;</span> <span class="hljs-comment">// 添加此行</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>配置解释</p><ul><li><code>&quot;cwd&quot;</code>：指定工作区根目录。</li></ul><h3 id="4-3（方案三）修改项目环境配置文件【成功】"><a href="#4-3（方案三）修改项目环境配置文件【成功】" class="headerlink" title="4.3（方案三）修改项目环境配置文件【成功】"></a>4.3（方案三）修改项目环境配置文件【成功】</h3><p>在根目录 <code>TEST_ROOT</code> 下 <code>.env</code> 文件中添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">PYTHONPATH=/root/test_root/folder_B<br></code></pre></td></tr></table></figure><p>添加后，重启 VSCode，问题解决。</p><p>配置解释</p><ul><li><code>&quot;PYTHONPATH&quot;</code>：指定 Python 解释器的路径。（此处添加 <code>folder_B</code> 的<strong>绝对路径</strong>）</li></ul><p><strong>注意</strong>，后续测试发现：</p><ul><li>使用 <code>conda</code> 的虚拟解释器，该方案没问题</li><li>使用系统解释器（比如 <code>/bin/python3</code> 或者 <code>/usr/bin/python3</code> ），仍然无法解决该问题</li></ul><h3 id="4-4（方案四）修改项目配置文件【成功】【推荐】"><a href="#4-4（方案四）修改项目配置文件【成功】【推荐】" class="headerlink" title="4.4（方案四）修改项目配置文件【成功】【推荐】"></a>4.4（方案四）修改项目配置文件【成功】【推荐】</h3><p>在根目录 <code>TEST_ROOT</code> 下 <code>.vscode/settings.json</code> 文件中添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;terminal.integrated.env.linux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;PYTHONPATH&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/folder_B:$&#123;env:PYTHONPATH&#125;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>配置解释</p><ul><li><code>&quot;terminal.integrated.env.linux.PYTHONPATH&quot;</code>：指定 Python 解释器的路径。</li></ul><h2 id="5-其他方案"><a href="#5-其他方案" class="headerlink" title="5. 其他方案"></a>5. 其他方案</h2><p>在系统中直接修改 <code>PYTHONPATH</code> 环境变量，但这种方式并不推荐，因为</p><ol><li>VSCode 的 <code>.env</code> 文件优先级更高。</li><li>修改系统环境变量会影响其他项目。</li></ol><h2 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a>6. 结论</h2><p><del>在 VSCode 中，修改 <code>.env</code> 文件是解决源代码根目录问题的最佳方案。</del><br>在 VSCode 中，修改 <code>.vscode/settings.json</code> 文件中 <code>&quot;terminal.integrated.env.linux.PYTHONPATH&quot;</code> (即<a href="#44%E6%96%B9%E6%A1%88%E5%9B%9B%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%88%90%E5%8A%9F%E6%8E%A8%E8%8D%90">4.4（方案四）修改项目配置文件【成功】【推荐】</a>)是解决源代码根目录问题的最佳方案。</p>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>IDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Ubuntu24.04中Conda补全问题：Bash/Zsh双终端配置指南</title>
    <link href="/echo-silence/posts/8832b323.html"/>
    <url>/echo-silence/posts/8832b323.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Bash、Zsh 支持 Conda 命令，以及命令补全功能</p></blockquote><h2 id="一、安装-miniconda3"><a href="#一、安装-miniconda3" class="headerlink" title="一、安装 miniconda3"></a>一、安装 miniconda3</h2><p>在 bash 中安装 miniconda3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x Miniconda3-latest-Linux-x86_64.sh &amp;&amp; ./Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><h2 id="二、Bash-支持-Conda"><a href="#二、Bash-支持-Conda" class="headerlink" title="二、Bash 支持 Conda"></a>二、Bash 支持 Conda</h2><h3 id="1-初始化-Conda"><a href="#1-初始化-Conda" class="headerlink" title="1. 初始化 Conda"></a>1. 初始化 Conda</h3><p>在 Bash 中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda init bash<br></code></pre></td></tr></table></figure><h3 id="2-安装-conda-bash-completion-插件"><a href="#2-安装-conda-bash-completion-插件" class="headerlink" title="2. 安装 conda-bash-completion 插件"></a>2. 安装 conda-bash-completion 插件</h3><p>要使 Bash 支持 Conda 命令补全功能，需要安装插件 conda-bash-completion</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install conda-bash-completion -n base -c conda-forge<br></code></pre></td></tr></table></figure><p>此时，Bash 中已经可以支持 Conda 以及 Conda 命令补全</p><h2 id="三、Zsh-支持-Conda"><a href="#三、Zsh-支持-Conda" class="headerlink" title="三、Zsh 支持 Conda"></a>三、Zsh 支持 Conda</h2><h3 id="1-初始化-Conda-1"><a href="#1-初始化-Conda-1" class="headerlink" title="1. 初始化 Conda"></a>1. 初始化 Conda</h3><p>在 Zsh 中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda init zsh<br></code></pre></td></tr></table></figure><h3 id="2-安装-conda-zsh-completion-插件"><a href="#2-安装-conda-zsh-completion-插件" class="headerlink" title="2. 安装 conda-zsh-completion 插件"></a>2. 安装 conda-zsh-completion 插件</h3><p>要使 Zsh 支持 Conda 命令补全功能，需要安装插件 conda-zsh-completion</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/esc/conda-zsh-completion ~/.oh-my-zsh/custom/plugins/conda-zsh-completion<br></code></pre></td></tr></table></figure><h3 id="3-启用插件"><a href="#3-启用插件" class="headerlink" title="3. 启用插件"></a>3. 启用插件</h3><p>修改 <code>~/.zshrc</code> 文件，在 <code>plugins</code> 末尾添加 <code>conda-zsh-completion</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plugins=(... conda-zsh-completion)<br></code></pre></td></tr></table></figure><h3 id="4-更新配置"><a href="#4-更新配置" class="headerlink" title="4. 更新配置"></a>4. 更新配置</h3><p>执行以下命令，更新 <code>.zshrc</code> 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="5-现象"><a href="#5-现象" class="headerlink" title="5. 现象"></a>5. 现象</h3><p>【问题】<br>在 zsh 中使用 Conda 命令，发现仍然不能自动补全 Conda 命令<br>【解决】<br>需要修改 <code>~/.zshrc</code> 文件，在最后一个 <code># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</code> 之后添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 确保 conda-zsh-completion 的路径在 fpath 中</span><br>fpath=(~/.oh-my-zsh/custom/plugins/conda-zsh-completion <span class="hljs-variable">$fpath</span>)<br><span class="hljs-comment"># 初始化补全系统</span><br><span class="hljs-built_in">autoload</span> -Uz compinit &amp;&amp; compinit<br></code></pre></td></tr></table></figure><p>更新 <code>.zshrc</code> 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.zshrc<br></code></pre></td></tr></table></figure><p>大功告成，zsh 中可以使用 conda 命令进行自动补全</p><h2 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h2><p>在 Bash 和 Zsh 中分别键入，在键入的过程使用<code>TAB</code>键观察是否可以补全命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Conda</tag>
      
      <tag>Bash</tag>
      
      <tag>Zsh</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让Ubuntu终端效率翻倍！Zsh配置+高颜值主题+实用插件指南</title>
    <link href="/echo-silence/posts/894a47dd.html"/>
    <url>/echo-silence/posts/894a47dd.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、安装-Zsh"><a href="#一、安装-Zsh" class="headerlink" title="一、安装 Zsh"></a>一、安装 Zsh</h2><p>在 bash 中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br><span class="hljs-built_in">sudo</span> apt update &amp;&amp; <span class="hljs-built_in">sudo</span> apt install zsh -y<br><span class="hljs-comment"># 设置为默认终端</span><br>chsh -s $(<span class="hljs-built_in">which</span> zsh)<br></code></pre></td></tr></table></figure><p>重启系统或者重新登陆后生效</p><h2 id="二、安装-Oh-My-Zsh-管理框架"><a href="#二、安装-Oh-My-Zsh-管理框架" class="headerlink" title="二、安装 Oh My Zsh(管理框架)"></a>二、安装 Oh My Zsh(管理框架)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="三、主题推荐"><a href="#三、主题推荐" class="headerlink" title="三、主题推荐"></a>三、主题推荐</h2><h3 id="1-安装字体"><a href="#1-安装字体" class="headerlink" title="1. 安装字体"></a>1. 安装字体</h3><p>安装 <a href="https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#meslo-nerd-font-patched-for-powerlevel10k">Powerlevel10k</a><br>，需要预先下载主题所需字体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载安装所需字体</span><br>wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf<br>wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf<br>wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf<br>wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf<br></code></pre></td></tr></table></figure><p>双击下载的字体并安装，在终端–配置文件首选项–配置文件（默认配置）–自定义字体中，选择“MesloLGS NF Regular”或者“MesloLGS NF”<br>安装完成后刷新字体缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fc-cache -fv<br></code></pre></td></tr></table></figure><h3 id="2-安装主题"><a href="#2-安装主题" class="headerlink" title="2. 安装主题"></a>2. 安装主题</h3><p>推荐 <a href="https://github.com/romkatv/powerlevel10k.git">Powerlevel10k</a> 主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br></code></pre></td></tr></table></figure><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h3><p>在 <code>~/.zshrc</code> 文件中将主题设置为 Powerlevel10k</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZSH_THEME=<span class="hljs-string">&quot;powerlevel10k/powerlevel10k&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-重新加载配置后会自动运行配置向导"><a href="#4-重新加载配置后会自动运行配置向导" class="headerlink" title="4. 重新加载配置后会自动运行配置向导"></a>4. 重新加载配置后会自动运行配置向导</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p>应该会自动弹出<code>powerlevel10k</code>的主题设置，如果未弹出，输入<code>p10k configure</code>即可手动进入设置页面，后续修改也可使用<br><code>p10k configure</code>进入修改</p><h3 id="5-其他主题推荐"><a href="#5-其他主题推荐" class="headerlink" title="5. 其他主题推荐"></a>5. 其他主题推荐</h3><ul><li><a href="https://github.com/spaceship-prompt/spaceship-prompt">Spaceship</a>:前端&#x2F;全栈开发</li><li><a href="https://github.com/starship/starship">Starship</a>:多 Shell 环境</li><li><a href="https://github.com/sindresorhus/pure">Pure</a>:追求纯净体验</li><li><a href="https://github.com/agnoster/agnoster-zsh-theme">Agnoster</a>:服务器管理</li><li><a href="https://github.com/powerline/powerline">Powerline</a>:与 Vim 的 powerline 状态栏风格统一</li><li><a href="https://github.com/dracula/zsh">Dracula</a>:长时间编码</li></ul><h2 id="四、推荐插件安装"><a href="#四、推荐插件安装" class="headerlink" title="四、推荐插件安装"></a>四、推荐插件安装</h2><h3 id="1-语法高亮"><a href="#1-语法高亮" class="headerlink" title="1. 语法高亮"></a>1. 语法高亮</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install zsh-syntax-highlighting -y<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="2-自动补全"><a href="#2-自动补全" class="headerlink" title="2. 自动补全"></a>2. 自动补全</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install zsh-autosuggestions -y<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh&quot;</span> &gt;&gt; ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="3-其他实用插件"><a href="#3-其他实用插件" class="headerlink" title="3. 其他实用插件"></a>3. 其他实用插件</h3><ul><li><p><a href="https://github.com/jeffreytse/zsh-vi-mode">zsh-vi-mode</a>:将 Zsh 变成完整的 Vi&#x2F;Vim 编辑模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/jeffreytse/zsh-vi-mode <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-vi-mode<br></code></pre></td></tr></table></figure></li><li><p><a href="https://github.com/wfxr/forgit">forgit</a>:交互式 git 命令增强</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/wfxr/forgit.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/forgit<br></code></pre></td></tr></table></figure></li><li><p><a href="https://github.com/marlonrichert/zsh-autocomplete">zsh-autocomplete</a>:输入时实时显示补全建议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/marlonrichert/zsh-autocomplete.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autocomplete<br></code></pre></td></tr></table></figure></li></ul><p>下载完成后，编辑 <code>~/.zshrc</code> 修改插件配置，在 <code>plugins数组</code> 后添加对应的插件名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plugins=(git <span class="hljs-built_in">sudo</span> docker docker-compose kubectl ubuntu forgit zsh-autocomplete)<br></code></pre></td></tr></table></figure><h3 id="4-插件优化技巧"><a href="#4-插件优化技巧" class="headerlink" title="4.插件优化技巧"></a>4.插件优化技巧</h3><p>性能优化配置（ <code>.zshrc</code> 中添加）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 按需加载插件（减少启动时间）</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:omz:plugins&#x27;</span> lazy-load <span class="hljs-built_in">yes</span><br><br><span class="hljs-comment"># 指定延迟加载的插件</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:omz:plugins:lazy&#x27;</span> aliases git docker<br></code></pre></td></tr></table></figure><h2 id="五、其他优化技巧"><a href="#五、其他优化技巧" class="headerlink" title="五、其他优化技巧"></a>五、其他优化技巧</h2><h3 id="1-历史命令优化"><a href="#1-历史命令优化" class="headerlink" title="1. 历史命令优化"></a>1. 历史命令优化</h3><p>在 <code>~/.zshrc</code> 中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">HISTFILE=~/.zsh_history<br>HISTSIZE=10000<br>SAVEHIST=10000<br><span class="hljs-built_in">setopt</span> appendhistory<br><span class="hljs-built_in">setopt</span> share_history<br><span class="hljs-built_in">setopt</span> hist_ignore_all_dups<br></code></pre></td></tr></table></figure><h3 id="2-别名设置"><a href="#2-别名设置" class="headerlink" title="2. 别名设置"></a>2. 别名设置</h3><p>在 <code>~/.zshrc</code> 中添加常用别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -alF&#x27;</span><br><span class="hljs-built_in">alias</span> la=<span class="hljs-string">&#x27;ls -A&#x27;</span><br><span class="hljs-built_in">alias</span> l=<span class="hljs-string">&#x27;ls -CF&#x27;</span><br><span class="hljs-built_in">alias</span> update=<span class="hljs-string">&#x27;sudo apt update &amp;&amp; sudo apt upgrade -y&#x27;</span><br><span class="hljs-built_in">alias</span> cls=<span class="hljs-string">&#x27;clear&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-启用颜色支持"><a href="#3-启用颜色支持" class="headerlink" title="3. 启用颜色支持"></a>3. 启用颜色支持</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export CLICOLOR=1&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export LS_COLORS=&quot;di=34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="六、最终生效"><a href="#六、最终生效" class="headerlink" title="六、最终生效"></a>六、最终生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="七、恢复-bash"><a href="#七、恢复-bash" class="headerlink" title="七、恢复 bash"></a>七、恢复 bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果需要切换回bash为默认终端</span><br>chsh -s $(<span class="hljs-built_in">which</span> bash)<br><span class="hljs-comment"># 如果临时切换回bash</span><br>bash<br></code></pre></td></tr></table></figure><h2 id="八、注意事项"><a href="#八、注意事项" class="headerlink" title="八、注意事项"></a>八、注意事项</h2><ul><li>插件太多可能会影响启动速度，建议按需安装</li><li>主题建议先选择自己喜欢的风格再安装</li><li>对于 <a href="https://github.com/romkatv/powerlevel10k.git">Powerlevel10k</a> 主题，使用<code>p10k configure</code>随时进行风格更换</li></ul>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美化</tag>
      
      <tag>Zsh</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu终极美化指南：GRUB定制+GNOME主题+必备插件推荐</title>
    <link href="/echo-silence/posts/1c1e6954.html"/>
    <url>/echo-silence/posts/1c1e6954.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、Grub-设置"><a href="#一、Grub-设置" class="headerlink" title="一、Grub 设置"></a>一、Grub 设置</h2><h3 id="1-安装-Grub-Customizer【推荐】"><a href="#1-安装-Grub-Customizer【推荐】" class="headerlink" title="1. 安装 Grub Customizer【推荐】"></a>1. 安装 Grub Customizer【推荐】</h3><p>Grub Customizer 是一个用于自定义 GRUB 引导菜单的实用程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo add-apt-repository ppa:danielrichter2007/grub-customizer &amp;&amp; sudo apt update &amp;&amp; sudo apt install -y grub-customizer<br></code></pre></td></tr></table></figure><h3 id="2-安装主题"><a href="#2-安装主题" class="headerlink" title="2. 安装主题"></a>2. 安装主题</h3><p>通过<a href="https://www.gnome-look.org/browse?cat=109&ord=rating">GRUB THEME</a>可以选择主题</p><ol><li><p>选择主题，进入主题对应的 github 页面，通过对应主题的说明进行安装 <strong>【推荐】</strong><br>以<a href="https://github.com/vinceliuice/grub2-themes">Tela grub theme</a>为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将项目<span class="hljs-built_in">clone</span>到本地</span><br>git clone https://github.com/vinceliuice/grub2-themes.git --depth 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>cd grub2-themes &amp;&amp; sudo ./install.sh -t tela -s 2k<br></code></pre></td></tr></table></figure></li><li><p>将下载下来的文件进行解压，并将其拷贝到<code>/boot/grub/themes/</code>目录下即可<br>以<a href="https://www.opendesktop.org/s/Gnome/p/1420727">CyberRe</a>为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cp -r CyberRe/ /boot/grub/themes/CyberRe/<br></code></pre></td></tr></table></figure></li><li><p>利用上述 Grub Customizer 在“外观设置”中可以自定义主题</p></li></ol><h2 id="二、GNOME-系统主题设置"><a href="#二、GNOME-系统主题设置" class="headerlink" title="二、GNOME 系统主题设置"></a>二、GNOME 系统主题设置</h2><p>通过<a href="https://www.opendesktop.org/s/Gnome/browse?cat=135&ord=rating">GTK3&#x2F;4 Themes</a>可以选择主题</p><ol><li><p>选择主题，进入主题对应的 github 页面，通过对应主题的说明进行安装 <strong>【推荐】</strong><br>以<a href="https://github.com/vinceliuice/Orchis-theme">Orchis gtk theme</a>为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将项目<span class="hljs-built_in">clone</span>到本地</span><br>git clone https://github.com/vinceliuice/Orchis-theme.git --depth 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装(默认安装路径为`<span class="hljs-variable">$HOME</span>/.themes`)</span><br>cd Orchis-theme &amp;&amp; sudo ./install.sh<br></code></pre></td></tr></table></figure><p>下载对应的<a href="https://github.com/vinceliuice/Tela-icon-theme">Tela Icon Theme</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将项目<span class="hljs-built_in">clone</span>到本地</span><br>git clone https://github.com/vinceliuice/Tela-icon-theme.git --depth 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装(默认安装路径为`<span class="hljs-variable">$HOME</span>/.local/share/icons`)</span><br>cd Tela-icon-theme &amp;&amp; sudo ./install.sh<br></code></pre></td></tr></table></figure></li><li><p>安装 GNOME Tweak Tool</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install gnome-tweaks<br></code></pre></td></tr></table></figure></li><li><p>安装 chrome</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb<br>sudo dpkg -i google-chrome-stable_current_amd64.deb<br>sudo apt-get -f install<br></code></pre></td></tr></table></figure></li><li><p>安装 chrome 插件<br>安装<a href="https://chromewebstore.google.com/detail/gnome-shell-%E9%9B%86%E6%88%90/gphhapmejobijbbhgpjhcjognlahblep">GNOME Shell 集成</a><br>插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装主机连接器</span><br>sudo apt install chrome-gnome-shell<br></code></pre></td></tr></table></figure></li></ol><h2 id="三、GNOME-插件推荐"><a href="#三、GNOME-插件推荐" class="headerlink" title="三、GNOME 插件推荐"></a>三、GNOME 插件推荐</h2><ul><li><a href="https://extensions.gnome.org/extension/261/kimpanel">Input Method Panel</a>：优化输入法面板</li><li><a href="https://extensions.gnome.org/extension/97/coverflow-alt-tab/">Coverflow Alt-Tab</a>: 优化切换窗口的效果</li><li><a href="https://extensions.gnome.org/extension/6/applications-menu/">Apps Menu</a>：添加应用程序快捷菜单</li><li><a href="https://extensions.gnome.org/extension/3088/extension-list/">Extension List</a>: 在通知栏集中管理 gnome 插件</li><li><a href="https://extensions.gnome.org/extension/1460/vitals/">Vitals</a>：显示计算机的温度、电压、扇速、内存、处理器、系统、网络、存储、显卡统计信息</li><li><a href="https://extensions.gnome.org/extension/7/removable-drive-menu/">Removable Drive Menu</a>: 通知栏中可以便捷地弹出存储器</li><li><a href="https://extensions.gnome.org/extension/779/clipboard-indicator/">Clipboard Indicator</a>：通知栏显示剪切板</li><li><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to Dock</a>: 任务栏配置</li><li><a href="https://extensions.gnome.org/extension/750/openweather/">OpenWeather</a>：天气信息</li><li><a href="https://extensions.gnome.org/extension/1319/gsconnect/">GSConnect</a>：手机电脑互联</li><li><a href="https://extensions.gnome.org/extension/3193/blur-my-shell/">Blur my Shell</a>：为 GNOME Shell 的不同部分添加模糊外观，包括顶部面板、破折号和概览。</li><li><a href="https://extensions.gnome.org/extension/3843/just-perfection/">Just Perfection</a>：自定义设置 Dock、通知面板、图标，以及调整与<br>GNOME 交互方式等一系列的微调</li><li><a href="https://extensions.gnome.org/extension/28/gtile/">gTile</a>：改进原厂 gnome-shell 的窗口平铺功能，实现自定义分屏</li><li><a href="https://extensions.gnome.org/extension/5940/quick-settings-audio-panel/">Quick Settings Audio Panel</a>：在通知栏中显示音频控制面板</li></ul>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GRUB</tag>
      
      <tag>美化</tag>
      
      <tag>系统</tag>
      
      <tag>GNOME</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双系统问题整理</title>
    <link href="/echo-silence/posts/1ee04425.html"/>
    <url>/echo-silence/posts/1ee04425.html</url>
    
    <content type="html"><![CDATA[<h2 id="win11-ubuntu-时间不同步问题"><a href="#win11-ubuntu-时间不同步问题" class="headerlink" title="win11 + ubuntu 时间不同步问题"></a>win11 + ubuntu 时间不同步问题</h2><p>方法一：使用 <code>timedatectl</code> 命令（不推荐）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装ntpdate，这个工具可以同步系统时间到指定的NTP服务器时间</span><br><span class="hljs-built_in">sudo</span> apt install ntpdate<br><span class="hljs-comment"># 在ubuntu24中安装hwclock</span><br><span class="hljs-built_in">sudo</span> apt install util-linux-extra<br><span class="hljs-comment"># 同步时间</span><br><span class="hljs-built_in">sudo</span> ntpdate time.windows.com<br><span class="hljs-comment"># 转换并写入硬件时钟的命令</span><br><span class="hljs-built_in">sudo</span> hwclock --localtime --systohc<br></code></pre></td></tr></table></figure><p>方法二：修改注册表（推荐）</p><ol><li><p>在 Windows 中修改注册表：</p><ul><li><p>按 <code>Win + R</code>，输入 <code>regedit</code> 打开注册表编辑器。</p></li><li><p>导航到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs explaintext">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation<br></code></pre></td></tr></table></figure></li><li><p>右键新建一个 <code>DWORD (32-bit) Value</code>，命名为 <code>RealTimeIsUniversal</code>，值设为 <code>1</code>。</p></li><li><p>重启 Windows。</p></li></ul></li><li><p>在 Ubuntu 中确认使用 UTC：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl | grep <span class="hljs-string">&quot;RTC in local TZ&quot;</span><br></code></pre></td></tr></table></figure><p>如果显示 <code>yes</code>，改为 UTC：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> timedatectl set-local-rtc 0<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双系统</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>Windows</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win11+Ubuntu双系统彻底卸载指南：100%清理分区与GRUB引导项</title>
    <link href="/echo-silence/posts/fc3226a0.html"/>
    <url>/echo-silence/posts/fc3226a0.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>注意事项</p><ol><li>操作前确保有 Windows 安装介质（USB），以防需要修复</li><li>对 EFI 分区的操作要格外小心</li><li>如果使用 BitLocker，可能需要先暂停保护</li><li>如果遇到问题，可以使用 Windows 安装介质启动，选择”修复计算机”→”疑难解答”→”启动修复”。</li></ol></blockquote><h2 id="一、备份重要数据（可选但强烈推荐）"><a href="#一、备份重要数据（可选但强烈推荐）" class="headerlink" title="一、备份重要数据（可选但强烈推荐）"></a>一、备份重要数据（可选但强烈推荐）</h2><ul><li>备份 Ubuntu 中的重要文件到 Windows 分区或外置存储</li><li>建议备份 Windows 的 EFI 分区内容（谨慎操作）</li></ul><h2 id="二、删除-Ubuntu-分区"><a href="#二、删除-Ubuntu-分区" class="headerlink" title="二、删除 Ubuntu 分区"></a>二、删除 Ubuntu 分区</h2><ol><li>重启进入 Windows 11 系统</li><li>打开磁盘管理</li><li>右键开始菜单 → 选择”磁盘管理”</li><li>删除 Ubuntu 分区<br>右键每个 Ubuntu 相关分区 → 选择”删除卷”。<strong>注意：不要误删 Windows 分区（通常是 NTFS 文件系统）</strong></li></ol><h2 id="三、清理-GRUB-引导项"><a href="#三、清理-GRUB-引导项" class="headerlink" title="三、清理 GRUB 引导项"></a>三、清理 GRUB 引导项</h2><h3 id="1-挂载-EFI-分区"><a href="#1-挂载-EFI-分区" class="headerlink" title="1.挂载 EFI 分区"></a>1.挂载 EFI 分区</h3><p>需要以管理员权限启动 DiskPart 程序。</p><ol><li>在“搜索”框中键入“diskpart”，右击并选择“以管理员身份运行”</li><li>按“Windows + R”键，并在框中键入 <code>diskpart</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出当前计算机连接的所有物理磁盘（硬盘、U盘等）</span><br>list disk<br><span class="hljs-comment"># 选择要操作的磁盘（这里选择 磁盘 0）</span><br><span class="hljs-keyword">select</span> disk 0<br><span class="hljs-comment"># 列出所选磁盘的所有分区</span><br>list partition<br><span class="hljs-comment"># 择要操作的分区（如 分区 1，找到约100MB的EFI分区）</span><br><span class="hljs-keyword">select</span> partition 1<br><span class="hljs-comment"># 强制删除选定的分区</span><br>delete partition override<br></code></pre></td></tr></table></figure><h3 id="2-检查-EFI-分区是否残留-ubuntu-文件"><a href="#2-检查-EFI-分区是否残留-ubuntu-文件" class="headerlink" title="2.检查 EFI 分区是否残留 ubuntu 文件"></a>2.检查 EFI 分区是否残留 ubuntu 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 挂载 EFI 分区（管理员权限运行）</span><br>mountvol S: /S<br><span class="hljs-comment"># 查看EFI分区内容</span><br><span class="hljs-built_in">dir</span> S:\EFI<br><span class="hljs-comment"># 正常应只有 Microsoft 文件夹，如果存在 ubuntu 文件夹，手动删除</span><br><span class="hljs-built_in">rm</span> -Force -Recurse S:\EFI\ubuntu<br><span class="hljs-comment"># 卸载 EFI 分区</span><br>mountvol S: /D<br></code></pre></td></tr></table></figure><h2 id="四、扩展-Windows-分区（可选）"><a href="#四、扩展-Windows-分区（可选）" class="headerlink" title="四、扩展 Windows 分区（可选）"></a>四、扩展 Windows 分区（可选）</h2><p>在磁盘管理中：</p><ol><li>右键 Windows 分区 → 选择”扩展卷”</li><li>将之前 Ubuntu 占用的未分配空间合并到 Windows 分区</li></ol><h2 id="五、最终检查"><a href="#五、最终检查" class="headerlink" title="五、最终检查"></a>五、最终检查</h2><p>重启系统，确认：</p><ol><li>直接进入 Windows 11 而无 GRUB 菜单</li><li>所有 Windows 功能正常</li></ol>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GRUB</tag>
      
      <tag>双系统</tag>
      
      <tag>分区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm代理配置全攻略：系统设置+Python运行环境一键搞定</title>
    <link href="/echo-silence/posts/2de36300.html"/>
    <url>/echo-silence/posts/2de36300.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Pycharm 工具作为一款强大的 IDE，其代理配置在实际开发中也是必不可少的，下面介绍下如何配置 Pycharm 的代理。</p><h2 id="1-设置系统代理"><a href="#1-设置系统代理" class="headerlink" title="1. 设置系统代理"></a>1. 设置系统代理</h2><h3 id="1-1-作用范围"><a href="#1-1-作用范围" class="headerlink" title="1.1 作用范围"></a>1.1 作用范围</h3><p>影响 PyCharm 本身的网络连接，例如：</p><ul><li>插件市场下载（Plugins Marketplace）</li><li>软件更新检查</li><li>版本控制（Git、SVN）的远程操作</li><li>部分内置工具的联网请求（如数据库工具、HTTP 客户端等）。</li></ul><h3 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h3><p>当你的网络环境需要通过代理才能访问外网时（例如公司内网或某些地区限制），需要在此配置代理，否则 PyCharm 自身可能无法连接互联网。</p><h3 id="1-3-设置步骤"><a href="#1-3-设置步骤" class="headerlink" title="1.3 设置步骤"></a>1.3 设置步骤</h3><p>在 <code>Settings（设置）</code> – <code>System Settigs（系统设置）</code> – <code>HTTP Proxy（HTTP 代理）</code> 中找到 <code>Manual proxy configuration（手动代理配置）</code><br>，修改实际的代理地址和端口，如下图所示：</p><p><img src="/echo-silence/custom/img/post/system_proxy.jpg" alt="alt text"></p><p>修改完成后，可以点击 <code>Check Connection（检查连接）</code> 按钮，测试是否配置代理成功，如下图所示：<br><img src="/echo-silence/custom/img/post/system_proxy_check.jpg" alt="alt text"></p><p>如果配置成功，会显示 <code>Connection successful（连接成功）</code> 的提示信息，如下图所示：<br><img src="/echo-silence/custom/img/post/system_proxy_check_success.jpg" alt="alt text"></p><h2 id="2-设置-python-运行-调试代理"><a href="#2-设置-python-运行-调试代理" class="headerlink" title="2. 设置 python 运行&#x2F;调试代理"></a>2. 设置 python 运行&#x2F;调试代理</h2><h3 id="2-1-作用范围"><a href="#2-1-作用范围" class="headerlink" title="2.1 作用范围"></a>2.1 作用范围</h3><p>仅影响通过 PyCharm 运行的 Python 程序（如脚本、Web 服务、API 请求等）。<br>它控制的是你的代码中的网络请求（如 requests、urllib、aiohttp 等库发起的请求）。</p><h3 id="2-2-使用场景"><a href="#2-2-使用场景" class="headerlink" title="2.2 使用场景"></a>2.2 使用场景</h3><p>当你的代码需要访问外部服务（如调用第三方 API、下载数据）且这些请求需要经过代理时配置。</p><h3 id="2-3-设置步骤"><a href="#2-3-设置步骤" class="headerlink" title="2.3 设置步骤"></a>2.3 设置步骤</h3><p>在界面右上角 <code>Run/Debug（运行/调试）</code> 按钮旁边点击 <code>Edit Configurations（编辑配置）</code> ，如下图所示：<br><img src="/echo-silence/custom/img/post/edit_configurations.jpg" alt="all text"><br>点击进入配置界面，点击 <code>Edit configuration templates（编辑配置模板）</code> – <code>Python</code> – <code>Edit environment variables（编辑环境变量）</code><br>–添加 <code>User environment variables（用户环境变量）</code>（填入实际需要设置的代理地址和端口） ，然后 <code>OK（确定）</code> 即可，如下图所示：<br><img src="/echo-silence/custom/img/post/python_proxy.jpg" alt="alt text"><br>至此，Pycharm 的代理配置就完成了。</p>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>IDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell函数自动加载器开发指南：Bash、Zsh双终端支持+延迟加载实现</title>
    <link href="/echo-silence/posts/ca15a280.html"/>
    <url>/echo-silence/posts/ca15a280.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>获取<code>~/.config/shell_functions</code>目录下的所有 shell 文件中的函数，将函数注册到<code>~/.bashrc</code>和<code>~/.zshrc</code>文件，方便终端使用</p></blockquote><h2 id="一、创建-shell-函数目录"><a href="#一、创建-shell-函数目录" class="headerlink" title="一、创建 shell 函数目录"></a>一、创建 shell 函数目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.config/shell_functions<br></code></pre></td></tr></table></figure><h2 id="二、添加功能函数"><a href="#二、添加功能函数" class="headerlink" title="二、添加功能函数"></a>二、添加功能函数</h2><h3 id="1-添加函数加载器"><a href="#1-添加函数加载器" class="headerlink" title="1. 添加函数加载器"></a>1. 添加函数加载器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; ~/.config/shell_functions/function_loader.sh &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment"># ====================== 函数自动加载器 ======================</span><br><span class="hljs-comment"># 文件位置: ~/.config/shell_functions/function_loader.sh</span><br><br><span class="hljs-comment"># 颜色定义</span><br>COLOR_RED=<span class="hljs-string">&#x27;\033[0;31m&#x27;</span><br>COLOR_GREEN=<span class="hljs-string">&#x27;\033[0;32m&#x27;</span><br>COLOR_YELLOW=<span class="hljs-string">&#x27;\033[0;33m&#x27;</span><br>COLOR_BLUE=<span class="hljs-string">&#x27;\033[0;34m&#x27;</span><br>COLOR_CYAN=<span class="hljs-string">&#x27;\033[0;36m&#x27;</span><br>COLOR_RESET=<span class="hljs-string">&#x27;\033[0m&#x27;</span><br><br><span class="hljs-comment"># 主加载函数</span><br><span class="hljs-function"><span class="hljs-title">__load_shell_function</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> func_name=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>    <span class="hljs-built_in">local</span> loaded_files=()<br><br>    <span class="hljs-keyword">for</span> func_file <span class="hljs-keyword">in</span> ~/.config/shell_functions/*.sh; <span class="hljs-keyword">do</span><br>        [[ <span class="hljs-string">&quot;<span class="hljs-variable">$func_file</span>&quot;</span> == *<span class="hljs-string">&quot;function_loader.sh&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">continue</span><br><br>        <span class="hljs-keyword">if</span> [[ -f <span class="hljs-string">&quot;<span class="hljs-variable">$func_file</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">if</span> grep -q -E <span class="hljs-string">&quot;^(function[[:space:]]+)?<span class="hljs-variable">$&#123;func_name&#125;</span>[[:space:]]*[(&#123;]&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$func_file</span>&quot;</span>; <span class="hljs-keyword">then</span><br>                <span class="hljs-keyword">if</span> [[ ! <span class="hljs-string">&quot; <span class="hljs-variable">$&#123;loaded_files[*]&#125;</span> &quot;</span> =~ <span class="hljs-string">&quot; <span class="hljs-variable">$&#123;func_file&#125;</span> &quot;</span> ]]; <span class="hljs-keyword">then</span><br>                    <span class="hljs-built_in">source</span> <span class="hljs-string">&quot;<span class="hljs-variable">$func_file</span>&quot;</span><br>                    loaded_files+=(<span class="hljs-string">&quot;<span class="hljs-variable">$func_file</span>&quot;</span>)<br>                <span class="hljs-keyword">fi</span><br>                <span class="hljs-built_in">return</span> 0<br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$ZSH_VERSION</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-comment"># 如果没有找到函数实现，输出错误信息</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;COLOR_RED&#125;</span>错误: 未找到函数 <span class="hljs-variable">$&#123;func_name&#125;</span> 的实现<span class="hljs-variable">$&#123;COLOR_RESET&#125;</span>&quot;</span> &gt;&amp;2<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">return</span> 1<br>&#125;<br><br><span class="hljs-comment"># 安全提取函数名</span><br><span class="hljs-function"><span class="hljs-title">__extract_function_name</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> line=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>    <span class="hljs-comment"># 严格匹配函数定义行</span><br>    <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$ZSH_VERSION</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span> =~ <span class="hljs-string">&quot;^[[:space:]]*(function[[:space:]]+)?([a-zA-Z_][a-zA-Z0-9_]*)[[:space:]]*[\(\&#123;]&quot;</span> ]]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;match[2]&#125;</span>&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span> =~ ^[[:space:]]*(<span class="hljs-keyword">function</span>[[:space:]]+)?([a-zA-Z_][a-zA-Z0-9_]*)[[:space:]]*[\(\&#123;] ]]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BASH_REMATCH[2]&#125;</span>&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 动态发现所有可用函数</span><br><span class="hljs-comment"># 动态发现所有可用函数</span><br><span class="hljs-function"><span class="hljs-title">__discover_shell_functions</span></span>() &#123;<br>    <span class="hljs-comment"># 使用普通数组代替关联数组</span><br>    <span class="hljs-built_in">declare</span> -a FUNC_CATEGORIES<br>    <span class="hljs-built_in">declare</span> -a SHELL_FUNCTIONS=()<br><br>    <span class="hljs-keyword">for</span> func_file <span class="hljs-keyword">in</span> ~/.config/shell_functions/*.sh; <span class="hljs-keyword">do</span><br>        [[ <span class="hljs-string">&quot;<span class="hljs-variable">$func_file</span>&quot;</span> == *<span class="hljs-string">&quot;function_loader.sh&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">continue</span><br><br>        <span class="hljs-keyword">if</span> [[ -f <span class="hljs-string">&quot;<span class="hljs-variable">$func_file</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">local</span> category=$(<span class="hljs-built_in">basename</span> <span class="hljs-string">&quot;<span class="hljs-variable">$func_file</span>&quot;</span> .sh)<br>            <span class="hljs-built_in">local</span> functions_in_file=()<br><br>            <span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -r line; <span class="hljs-keyword">do</span><br>                [[ <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span> =~ ^[[:space:]]*# ]] &amp;&amp; <span class="hljs-built_in">continue</span><br>                [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;line//[[:space:]]/&#125;</span>&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">continue</span><br><br>                <span class="hljs-built_in">local</span> func_name=$(__extract_function_name <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span>)<br>                [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$func_name</span>&quot;</span> ]] &amp;&amp; functions_in_file+=(<span class="hljs-string">&quot;<span class="hljs-variable">$func_name</span>&quot;</span>)<br>            <span class="hljs-keyword">done</span> &lt;<span class="hljs-string">&quot;<span class="hljs-variable">$func_file</span>&quot;</span><br><br>            <span class="hljs-built_in">local</span> public_functions=()<br>            <span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;functions_in_file[@]&#125;</span>&quot;</span> | <span class="hljs-built_in">sort</span> -u); <span class="hljs-keyword">do</span><br>                [[ <span class="hljs-string">&quot;<span class="hljs-variable">$func</span>&quot;</span> != _* ]] &amp;&amp; public_functions+=(<span class="hljs-string">&quot;<span class="hljs-variable">$func</span>&quot;</span>)<br>            <span class="hljs-keyword">done</span><br><br>            <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$&#123;#public_functions[@]&#125;</span> &gt; <span class="hljs-number">0</span>)); <span class="hljs-keyword">then</span><br>                FUNC_CATEGORIES+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;category&#125;</span>:<span class="hljs-variable">$&#123;public_functions[*]&#125;</span>&quot;</span>)<br>                SHELL_FUNCTIONS+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;public_functions[@]&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br><br>    <span class="hljs-comment"># 显示分类信息</span><br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$ZSH_VERSION</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;COLOR_BLUE&#125;</span>\n可用命令分类:<span class="hljs-variable">$&#123;COLOR_RESET&#125;</span>&quot;</span> &gt;&amp;2<br>        <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;FUNC_CATEGORIES[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>            <span class="hljs-built_in">local</span> category=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;entry%%:*&#125;</span>&quot;</span><br>            <span class="hljs-built_in">local</span> <span class="hljs-built_in">functions</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;entry#*:&#125;</span>&quot;</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;COLOR_YELLOW&#125;</span><span class="hljs-variable">$&#123;category&#125;</span>:<span class="hljs-variable">$&#123;COLOR_RESET&#125;</span>&quot;</span> &gt;&amp;2<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$functions</span>&quot;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;\n&#x27;</span> | sed <span class="hljs-string">&#x27;s/^/  /&#x27;</span> &gt;&amp;2<br>        <span class="hljs-keyword">done</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SHELL_FUNCTIONS[@]&#125;</span>&quot;</span> | <span class="hljs-built_in">sort</span> -u<br>&#125;<br><br><span class="hljs-comment"># 安全创建函数桩</span><br><span class="hljs-function"><span class="hljs-title">__create_function_stub</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> func=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br><br>    <span class="hljs-comment"># 验证函数名是否有效</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$func</span>&quot;</span> =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]] &amp;&amp; [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$func</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> ! <span class="hljs-built_in">declare</span> -f <span class="hljs-string">&quot;<span class="hljs-variable">$func</span>&quot;</span> &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;function <span class="hljs-variable">$&#123;func&#125;</span>() &#123; __load_shell_function \&quot;<span class="hljs-variable">$&#123;func&#125;</span>\&quot; &amp;&amp; \&quot;<span class="hljs-variable">$&#123;func&#125;</span>\&quot; \&quot;\$@\&quot;; &#125;&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$ZSH_VERSION</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;COLOR_RED&#125;</span>警告: 跳过无效函数名 &#x27;<span class="hljs-variable">$&#123;func&#125;</span>&#x27;<span class="hljs-variable">$&#123;COLOR_RESET&#125;</span>&quot;</span> &gt;&amp;2<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 主初始化过程</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">__init_function_loader</span></span>() &#123;<br>    <span class="hljs-comment"># 初始化数组</span><br>    <span class="hljs-built_in">local</span> all_functions=()<br><br>    <span class="hljs-comment"># 发现所有函数</span><br>    <span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -r func; <span class="hljs-keyword">do</span><br>        all_functions+=(<span class="hljs-string">&quot;<span class="hljs-variable">$func</span>&quot;</span>)<br>    <span class="hljs-keyword">done</span> &lt; &lt;(__discover_shell_functions)<br><br>    <span class="hljs-comment"># 为每个函数创建桩</span><br>    <span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;all_functions[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>        __create_function_stub <span class="hljs-string">&quot;<span class="hljs-variable">$func</span>&quot;</span><br>    <span class="hljs-keyword">done</span><br><br>    <span class="hljs-comment"># 显示统计信息</span><br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$ZSH_VERSION</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n<span class="hljs-variable">$&#123;COLOR_GREEN&#125;</span>已注册 <span class="hljs-variable">$&#123;#all_functions[@]&#125;</span> 个延迟加载函数<span class="hljs-variable">$&#123;COLOR_RESET&#125;</span>&quot;</span> &gt;&amp;2<br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;COLOR_CYAN&#125;</span>提示: 首次使用命令时会自动加载相应模块<span class="hljs-variable">$&#123;COLOR_RESET&#125;</span>&quot;</span> &gt;&amp;2<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 执行初始化</span><br>__init_function_loader<br><br>EOF<br></code></pre></td></tr></table></figure><h3 id="2-添加功能函数"><a href="#2-添加功能函数" class="headerlink" title="2. 添加功能函数"></a>2. 添加功能函数</h3><p>以添加 <code>proxy_utils.sh</code> 为例（该函数功能在于能够便捷地开关代理，<strong>其中的代理端口、测试地址等根据实际情况改写</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; ~/.config/shell_functions/proxy_utils.sh &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment"># ====================== 代理控制模块 ======================</span><br><span class="hljs-comment"># 颜色定义</span><br>RED=<span class="hljs-string">&#x27;\033[0;31m&#x27;</span><br>GREEN=<span class="hljs-string">&#x27;\033[0;32m&#x27;</span><br>YELLOW=<span class="hljs-string">&#x27;\033[0;33m&#x27;</span><br>BLUE=<span class="hljs-string">&#x27;\033[0;34m&#x27;</span><br>CYAN=<span class="hljs-string">&#x27;\033[0;36m&#x27;</span><br>NC=<span class="hljs-string">&#x27;\033[0m&#x27;</span> <span class="hljs-comment"># No Color</span><br><br><span class="hljs-comment"># 配置区（修改这里适应你的环境）</span><br>PROXY_HOST=<span class="hljs-string">&quot;127.0.0.1&quot;</span><br>HTTP_PORT=<span class="hljs-string">&quot;7897&quot;</span><br>SOCKS_PORT=<span class="hljs-string">&quot;7897&quot;</span><br>NO_PROXY=<span class="hljs-string">&quot;localhost,127.0.0.1,192.168.0.0/16,10.0.0.0/8,.internal,.local&quot;</span><br>TEST_URL=<span class="hljs-string">&quot;https://www.google.com&quot;</span>  <span class="hljs-comment"># 用于测试代理的网站</span><br>DIRECT_TEST_URL=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>  <span class="hljs-comment"># 用于测试直连的网站</span><br>TIMEOUT=3  <span class="hljs-comment"># 测试超时时间(秒)</span><br><br><span class="hljs-comment"># 网络测试函数</span><br><span class="hljs-function"><span class="hljs-title">_test_connection</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> url=<span class="hljs-variable">$1</span><br>    <span class="hljs-built_in">local</span> proxy_type=<span class="hljs-variable">$2</span><br>    <span class="hljs-built_in">local</span> proxy_addr=<span class="hljs-variable">$3</span><br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CYAN&#125;</span>测试连接: <span class="hljs-variable">$url</span> ...<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br><br>    <span class="hljs-built_in">local</span> start_time=$(<span class="hljs-built_in">date</span> +%s.%N)<br><br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$proxy_type</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-comment"># 直连测试</span><br>        <span class="hljs-keyword">if</span> curl -Is <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span> --connect-timeout <span class="hljs-variable">$TIMEOUT</span> &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">local</span> end_time=$(<span class="hljs-built_in">date</span> +%s.%N)<br>            <span class="hljs-built_in">local</span> elapsed=$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%.2f&quot;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$end_time</span> - <span class="hljs-variable">$start_time</span>&quot;</span> | bc))<br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GREEN&#125;</span>✓ 直连成功 (<span class="hljs-variable">$&#123;elapsed&#125;</span>s)<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>            <span class="hljs-built_in">return</span> 0<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;RED&#125;</span>✗ 直连失败<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>            <span class="hljs-built_in">return</span> 1<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment"># 代理测试</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$proxy_type</span> <span class="hljs-keyword">in</span><br>            http)<br>                <span class="hljs-keyword">if</span> curl -Is <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span> --connect-timeout <span class="hljs-variable">$TIMEOUT</span> -x <span class="hljs-string">&quot;<span class="hljs-variable">$proxy_addr</span>&quot;</span> &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>                    <span class="hljs-built_in">local</span> end_time=$(<span class="hljs-built_in">date</span> +%s.%N)<br>                    <span class="hljs-built_in">local</span> elapsed=$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%.2f&quot;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$end_time</span> - <span class="hljs-variable">$start_time</span>&quot;</span> | bc))<br>                    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GREEN&#125;</span>✓ HTTP代理成功 (<span class="hljs-variable">$&#123;elapsed&#125;</span>s)<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>                    <span class="hljs-built_in">return</span> 0<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;RED&#125;</span>✗ HTTP代理失败<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>                    <span class="hljs-built_in">return</span> 1<br>                <span class="hljs-keyword">fi</span><br>                ;;<br>            socks5)<br>                <span class="hljs-keyword">if</span> curl -Is <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span> --connect-timeout <span class="hljs-variable">$TIMEOUT</span> --socks5-hostname <span class="hljs-string">&quot;<span class="hljs-variable">$proxy_addr</span>&quot;</span> &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>                    <span class="hljs-built_in">local</span> end_time=$(<span class="hljs-built_in">date</span> +%s.%N)<br>                    <span class="hljs-built_in">local</span> elapsed=$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%.2f&quot;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$end_time</span> - <span class="hljs-variable">$start_time</span>&quot;</span> | bc))<br>                    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GREEN&#125;</span>✓ SOCKS5代理成功 (<span class="hljs-variable">$&#123;elapsed&#125;</span>s)<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>                    <span class="hljs-built_in">return</span> 0<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;RED&#125;</span>✗ SOCKS5代理失败<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>                    <span class="hljs-built_in">return</span> 1<br>                <span class="hljs-keyword">fi</span><br>                ;;<br>        <span class="hljs-keyword">esac</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 状态检测</span><br><span class="hljs-function"><span class="hljs-title">_proxy_status_check</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BLUE&#125;</span>====== 代理状态 ======<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$http_proxy</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;HTTP 代理: <span class="hljs-variable">$&#123;GREEN&#125;</span>已启用<span class="hljs-variable">$&#123;NC&#125;</span> (<span class="hljs-variable">$http_proxy</span>)&quot;</span> || <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;HTTP 代理: <span class="hljs-variable">$&#123;RED&#125;</span>未启用<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$https_proxy</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;HTTPS 代理: <span class="hljs-variable">$&#123;GREEN&#125;</span>已启用<span class="hljs-variable">$&#123;NC&#125;</span> (<span class="hljs-variable">$https_proxy</span>)&quot;</span> || <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;HTTPS 代理: <span class="hljs-variable">$&#123;RED&#125;</span>未启用<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$all_proxy</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;SOCKS 代理: <span class="hljs-variable">$&#123;GREEN&#125;</span>已启用<span class="hljs-variable">$&#123;NC&#125;</span> (<span class="hljs-variable">$all_proxy</span>)&quot;</span> || <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;SOCKS 代理: <span class="hljs-variable">$&#123;RED&#125;</span>未启用<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BLUE&#125;</span>=====================<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 启用代理</span><br><span class="hljs-function"><span class="hljs-title">proxy_on</span></span>() &#123;<br>    <span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;PROXY_HOST&#125;</span>:<span class="hljs-variable">$&#123;HTTP_PORT&#125;</span>&quot;</span><br>    <span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;PROXY_HOST&#125;</span>:<span class="hljs-variable">$&#123;HTTP_PORT&#125;</span>&quot;</span><br>    <span class="hljs-built_in">export</span> all_proxy=<span class="hljs-string">&quot;socks5://<span class="hljs-variable">$&#123;PROXY_HOST&#125;</span>:<span class="hljs-variable">$&#123;SOCKS_PORT&#125;</span>&quot;</span><br>    <span class="hljs-built_in">export</span> no_proxy=<span class="hljs-string">&quot;<span class="hljs-variable">$NO_PROXY</span>&quot;</span><br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;YELLOW&#125;</span>正在启用代理并测试连接...<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;HTTP 代理: http://<span class="hljs-variable">$&#123;PROXY_HOST&#125;</span>:<span class="hljs-variable">$&#123;HTTP_PORT&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;SOCKS5 代理: socks5://<span class="hljs-variable">$&#123;PROXY_HOST&#125;</span>:<span class="hljs-variable">$&#123;SOCKS_PORT&#125;</span>&quot;</span><br><br>    <span class="hljs-comment"># 测试HTTP代理</span><br>    _test_connection <span class="hljs-string">&quot;<span class="hljs-variable">$TEST_URL</span>&quot;</span> <span class="hljs-string">&quot;http&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PROXY_HOST&#125;</span>:<span class="hljs-variable">$&#123;HTTP_PORT&#125;</span>&quot;</span><br><br>    <span class="hljs-comment"># 测试SOCKS5代理</span><br>    _test_connection <span class="hljs-string">&quot;<span class="hljs-variable">$TEST_URL</span>&quot;</span> <span class="hljs-string">&quot;socks5&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PROXY_HOST&#125;</span>:<span class="hljs-variable">$&#123;SOCKS_PORT&#125;</span>&quot;</span><br><br>    _proxy_status_check<br>&#125;<br><br><span class="hljs-comment"># 禁用代理</span><br><span class="hljs-function"><span class="hljs-title">proxy_off</span></span>() &#123;<br>    <span class="hljs-built_in">unset</span> http_proxy https_proxy all_proxy no_proxy<br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;YELLOW&#125;</span>正在关闭代理并测试直连...<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br><br>    <span class="hljs-comment"># 测试直连</span><br>    _test_connection <span class="hljs-string">&quot;<span class="hljs-variable">$DIRECT_TEST_URL</span>&quot;</span> <span class="hljs-string">&quot;&quot;</span><br><br>    _proxy_status_check<br>&#125;<br><br><span class="hljs-comment"># 状态切换</span><br><span class="hljs-function"><span class="hljs-title">proxy_toggle</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$http_proxy</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        proxy_off<br>    <span class="hljs-keyword">else</span><br>        proxy_on<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 帮助信息</span><br><span class="hljs-function"><span class="hljs-title">proxy_help</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;YELLOW&#125;</span>代理快捷命令:<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;YELLOW&#125;</span>当前配置:<span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;  代理地址: <span class="hljs-variable">$&#123;CYAN&#125;</span><span class="hljs-variable">$&#123;PROXY_HOST&#125;</span><span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;  HTTP端口: <span class="hljs-variable">$&#123;CYAN&#125;</span><span class="hljs-variable">$&#123;HTTP_PORT&#125;</span><span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;  SOCKS端口: <span class="hljs-variable">$&#123;CYAN&#125;</span><span class="hljs-variable">$&#123;SOCKS_PORT&#125;</span><span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;  测试URL: <span class="hljs-variable">$&#123;CYAN&#125;</span><span class="hljs-variable">$&#123;TEST_URL&#125;</span><span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;  直连测试URL: <span class="hljs-variable">$&#123;CYAN&#125;</span><span class="hljs-variable">$&#123;DIRECT_TEST_URL&#125;</span><span class="hljs-variable">$&#123;NC&#125;</span>&quot;</span><br>&#125;<br>EOF<br><br></code></pre></td></tr></table></figure><h2 id="三、添加通用配置文件"><a href="#三、添加通用配置文件" class="headerlink" title="三、添加通用配置文件"></a>三、添加通用配置文件</h2><p>可能会同时使用 zsh 或者 bash，所以将配置文件作为通用配置文件进行加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 写入通用配置内容</span><br><span class="hljs-built_in">cat</span> &gt; ~/.config/shell_common &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment"># ====================== Shell 函数加载 ======================</span><br><span class="hljs-comment"># 加载函数自动加载器</span><br><span class="hljs-keyword">if</span> [ -f ~/.config/shell_functions/function_loader.sh ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">source</span> ~/.config/shell_functions/function_loader.sh<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 禁用危险操作</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">rm</span>=<span class="hljs-string">&#x27;echo &quot;Use trash-put instead!&quot;; false&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">rmdir</span>=<span class="hljs-string">&#x27;echo &quot;Protected directory!&quot;; false&#x27;</span><br><br><span class="hljs-comment"># 保留逃生通道</span><br><span class="hljs-built_in">alias</span> real-rm=<span class="hljs-string">&#x27;/bin/rm&#x27;</span><br><span class="hljs-built_in">alias</span> real-rmdir=<span class="hljs-string">&#x27;/bin/rmdir&#x27;</span><br>EOF<br></code></pre></td></tr></table></figure><h2 id="四、修改并更新-bashrc文件"><a href="#四、修改并更新-bashrc文件" class="headerlink" title="四、修改并更新~/.bashrc文件"></a>四、修改并更新<code>~/.bashrc</code>文件</h2><h3 id="1-修改bashrc"><a href="#1-修改bashrc" class="headerlink" title="1. 修改bashrc"></a>1. 修改<code>bashrc</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; ~/.bashrc &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br>[ -f ~/.config/shell_common ] &amp;&amp; <span class="hljs-built_in">source</span> ~/.config/shell_common<br>EOF<br></code></pre></td></tr></table></figure><h3 id="2-更新bashrc"><a href="#2-更新bashrc" class="headerlink" title="2. 更新bashrc"></a>2. 更新<code>bashrc</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="五、修改并更新-zshrc文件"><a href="#五、修改并更新-zshrc文件" class="headerlink" title="五、修改并更新~/.zshrc文件"></a>五、修改并更新<code>~/.zshrc</code>文件</h2><h3 id="1-修改zshrc"><a href="#1-修改zshrc" class="headerlink" title="1. 修改zshrc"></a>1. 修改<code>zshrc</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; ~/.zshrc &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br>[ -f ~/.config/shell_common ] &amp;&amp; <span class="hljs-built_in">source</span> ~/.config/shell_common<br>EOF<br></code></pre></td></tr></table></figure><h3 id="2-更新zshrc"><a href="#2-更新zshrc" class="headerlink" title="2. 更新zshrc"></a>2. 更新<code>zshrc</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="六、测试函数"><a href="#六、测试函数" class="headerlink" title="六、测试函数"></a>六、测试函数</h2><p>在 bash 终端和 zsh 终端分别执行以下命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开启代理</span><br>proxy_on<br><span class="hljs-comment"># 关闭代理</span><br>proxy_off<br><span class="hljs-comment"># 切换代理状态</span><br>proxy_toggle<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu24.04保姆级装机指南：避坑搜狗输入法+GNOME插件推荐+高效下载工具全攻略</title>
    <link href="/echo-silence/posts/7d6af4c4.html"/>
    <url>/echo-silence/posts/7d6af4c4.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、分区说明"><a href="#一、分区说明" class="headerlink" title="一、分区说明"></a>一、分区说明</h2><p>以 64GB 内存+500GB 磁盘为例说明：</p><table><thead><tr><th>挂载点</th><th>大小</th><th>文件系统</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;boot&#x2F;efi</td><td>512M</td><td>FAT32(VFAT)</td><td><strong>必选</strong> EFI 系统分区（ESP），存放引导文件。双系统可以直接复用 WindowsESP 分区</td></tr><tr><td>&#x2F;boot</td><td>1-2GB</td><td>EXT4</td><td><strong>可选</strong>独立<code>/boot</code>可防止内核更新占满根分区，大内存机器可省略</td></tr><tr><td>&#x2F;</td><td>100-150GB</td><td>EXT4</td><td><strong>必选</strong> 根分区，系统核心和软件安装</td></tr><tr><td>swap</td><td>4-8GB</td><td>SWAP</td><td><strong>可选</strong>64GB 内存可大幅减少或禁用交换分区（用<code>zram</code>替代更高效）</td></tr><tr><td>&#x2F;home</td><td>剩余空间</td><td>EXT4</td><td><strong>推荐</strong>用户数据独立存储，重装系统时保留</td></tr></tbody></table><h2 id="二、基础软件"><a href="#二、基础软件" class="headerlink" title="二、基础软件"></a>二、基础软件</h2><p>安装基础软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update &amp;&amp; sudo apt install -y git curl wget vim<br></code></pre></td></tr></table></figure><h2 id="三、使用-fcitx5-配置中文输入法"><a href="#三、使用-fcitx5-配置中文输入法" class="headerlink" title="三、使用 fcitx5 配置中文输入法"></a>三、使用 fcitx5 配置中文输入法</h2><p>由于搜狗输入法暂时不支持 fcitx5，故不使用搜狗输入法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install fcitx5 fcitx5-chinese-addons fcitx5-frontend-* kde-config-fcitx5 fcitx5-config-qt<br>echo -e &quot;\n# Fcitx5 Input Method Environment Variables\nexport XMODIFIERS=&#x27;@im=fcitx5&#x27;\nexport XMODIFIER=&#x27;@im=fcitx5&#x27;\nexport GTK_IM_MODULE=fcitx5\nexport QT_IM_MODULE=fcitx5\nexport DefaultIMModule=fcitx5&quot; &gt;&gt; ~/.profile &amp;&amp; source ~/.profile<br></code></pre></td></tr></table></figure><p>如需安装<a href="https://pinyin.sogou.com/dict/">搜狗词库</a>，请自行下载安装<br>下文<strong>安装 gnome 插件</strong>中，其中安装<strong>Input Method Panel</strong>可以优化输入法界面</p><h2 id="四、安装搜狗输入法【不推荐】"><a href="#四、安装搜狗输入法【不推荐】" class="headerlink" title="四、安装搜狗输入法【不推荐】"></a>四、安装搜狗输入法【<strong>不推荐</strong>】</h2><p>搜狗输入法安装后，部分程序中无法使用，例如：chrome、文件管理器</p><h3 id="1-安装-fcitx"><a href="#1-安装-fcitx" class="headerlink" title="1. 安装 fcitx"></a>1. 安装 fcitx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载ibus、fcitx5</span><br>sudo apt remove --purge ibus* fcitx5*<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除残留以及更新源</span><br>sudo apt autoremove &amp;&amp; sudo apt autoclean &amp;&amp; sudo apt update &amp;&amp; sudo apt install fcitx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置开机启动</span><br>sudo cp /usr/share/applications/fcitx.desktop /etc/xdg/autostart/<br></code></pre></td></tr></table></figure><ol><li>打开 系统设置——区域和语言——管理已安装的语言——在“语言”tab 下——点击“添加或删除语言”</li><li>弹出“已安装语言”窗口，勾选中文（简体）、英语，点击“应用”</li><li>回到“语言支持”窗口，在键盘输入法系统中，选择“fcitx”</li></ol><h3 id="2-安装输入法"><a href="#2-安装输入法" class="headerlink" title="2. 安装输入法"></a>2. 安装输入法</h3><ol><li>下载<a href="https://shurufa.sogou.com/linux">linux 版本搜狗输入法</a></li><li>使用命令 <code>sudo dpkg -i sogoupinyin_xxx.deb</code> 安装文件</li><li>终端执行<code>sudo apt install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2 libgsettings-qt1</code></li><li>重启系统 <code>reboot</code></li></ol><h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><ol><li>如果遇到切换输入法后闪烁问题，可能与 Wayland 显示服务器有关，执行<code>sudo vim /etc/gdm3/custom.conf</code> 取消注释<br><code>WaylandEnable=false</code>即可</li><li>可以使用<code>fcitx-diagnose</code>检查<code>fcitx</code>是否正常运行</li></ol><h2 id="五、禁用-home目录下自动生成文件夹"><a href="#五、禁用-home目录下自动生成文件夹" class="headerlink" title="五、禁用/home目录下自动生成文件夹"></a>五、禁用<code>/home</code>目录下自动生成文件夹</h2><p>目的：删除中文文件夹，且系统不会再次自动创建</p><ol><li><p>关闭 user-dirs 自动生成功能，<code>sudo vim /etc/xdg/user-dirs.conf</code>，将 enabled&#x3D;True 改为 enabled&#x3D;False</p></li><li><p>修改用户现目前的文件夹（主要是为了清理文件管理器左边显示的栏目），<code>sudo vim ~/.config/user-dirs.dirs</code><br>，只保留“桌面”相关行，其余的全部注释，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">XDG_DESKTOP_DIR=&quot;$HOME/桌面&quot;<br>#XDG_DOWNLOAD_DIR=&quot;$HOME/下载&quot;<br>#XDG_TEMPLATES_DIR=&quot;$HOME/模板&quot;<br>#XDG_PUBLICSHARE_DIR=&quot;$HOME/公共&quot;<br>#XDG_DOCUMENTS_DIR=&quot;$HOME/文档&quot;<br>#XDG_MUSIC_DIR=&quot;$HOME/音乐&quot;<br>#XDG_PICTURES_DIR=&quot;$HOME/图片&quot;<br>#XDG_VIDEOS_DIR=&quot;$HOME/视频&quot;<br></code></pre></td></tr></table></figure></li><li><p>强制更新，<code>xdg-user-dirs-update --force</code></p></li><li><p>创建英文文件夹，例如：<code>mkdir ~/downloads</code>，根据实际情况自行处理</p></li><li><p>删除多余的中文文件夹，保留“桌面”文件夹<br><code>find ~ -maxdepth 1 -type d \( -name &quot;下载&quot; -o -name &quot;模板&quot; -o -name &quot;公共&quot; -o -name &quot;文档&quot; -o -name &quot;音乐&quot; -o -name &quot;图片&quot; -o -name &quot;视频&quot; \) -exec rm -rf &#123;&#125; +</code></p></li><li><p>移除左侧书签栏中多余的文件夹</p></li></ol><h2 id="六、更新软件源"><a href="#六、更新软件源" class="headerlink" title="六、更新软件源"></a>六、更新软件源</h2><p>在 Ubuntu 24.04 中，APT 软件源配置方式发生了变化，默认使用 &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ubuntu.sources 文件（Debian 格式）而非传统的<br>&#x2F;etc&#x2F;apt&#x2F;sources.list。</p><h3 id="1-针对新配置方式的阿里源替换方法"><a href="#1-针对新配置方式的阿里源替换方法" class="headerlink" title="1. 针对新配置方式的阿里源替换方法"></a>1. 针对<strong>新配置方式</strong>的阿里源替换方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份源列表</span><br>sudo cp /etc/apt/sources.list.d/ubuntu.sources /etc/apt/sources.list.d/ubuntu.sources.bak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换</span><br>sudo tee /etc/apt/sources.list.d/ubuntu.sources &lt;&lt;EOF<br><span class="hljs-meta prompt_"># </span><span class="language-bash">默认启用阿里镜像源（Ubuntu 24.04 Noble Numbat）</span><br>Types: deb deb-src<br>URIs: https://mirrors.aliyun.com/ubuntu/<br>Suites: noble noble-updates noble-backports noble-security<br>Components: main restricted universe multiverse<br>Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新源</span><br>sudo apt update &amp;&amp; sudo apt upgrade -y<br></code></pre></td></tr></table></figure><h3 id="2-针对老配置方式的清华源替换方法"><a href="#2-针对老配置方式的清华源替换方法" class="headerlink" title="2. 针对老配置方式的清华源替换方法"></a>2. 针对<strong>老配置方式</strong>的清华源替换方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份源列表</span><br>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak<br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换</span><br>sudo sed -i &quot;s@http://.*archive.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g&quot; /etc/apt/sources.list<br>sudo sed -i &quot;s@http://.*security.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g&quot; /etc/apt/sources.list<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新源</span><br>sudo apt update &amp;&amp; sudo apt upgrade -y<br></code></pre></td></tr></table></figure><h2 id="七、安装-chrome"><a href="#七、安装-chrome" class="headerlink" title="七、安装 chrome"></a>七、安装 chrome</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">导入 Google 包签名密钥</span><br>curl -fsSL https://dl.google.com/linux/linux_signing_key.pub| sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/google.gpg<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在 Ubuntu 系统中添加 Google Chrome 存储库</span><br>sudo sh -c &#x27;echo &quot;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google-chrome.list&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新可用软件包列表</span><br>sudo apt update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装chrome</span><br>sudo apt install google-chrome-stable<br></code></pre></td></tr></table></figure><h2 id="八、安装-gnome-插件"><a href="#八、安装-gnome-插件" class="headerlink" title="八、安装 gnome 插件"></a>八、安装 gnome 插件</h2><p>chrome<br>中安装<a href="https://chromewebstore.google.com/detail/gnome-shell-%E9%9B%86%E6%88%90/gphhapmejobijbbhgpjhcjognlahblep">GNOME Shell 集成</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装个性化桌面工具</span><br>sudo apt install gnome-tweaks<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装主机连接器</span><br>sudo apt install chrome-gnome-shell<br></code></pre></td></tr></table></figure><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul><li><a href="https://extensions.gnome.org/extension/261/kimpanel">Input Method Panel</a>：优化输入法面板</li><li><a href="https://extensions.gnome.org/extension/97/coverflow-alt-tab/">Coverflow Alt-Tab</a>: 优化切换窗口的效果</li><li><a href="https://extensions.gnome.org/extension/6/applications-menu/">Apps Menu</a>：添加应用程序快捷菜单</li><li><a href="https://extensions.gnome.org/extension/3088/extension-list/">Extension List</a>: 在通知栏集中管理 gnome 插件</li><li><a href="https://extensions.gnome.org/extension/1460/vitals/">Vitals</a>：显示计算机的温度、电压、扇速、内存、处理器、系统、网络、存储、显卡统计信息</li><li><a href="https://extensions.gnome.org/extension/7/removable-drive-menu/">Removable Drive Menu</a>: 通知栏中可以便捷地弹出存储器</li><li><a href="https://extensions.gnome.org/extension/779/clipboard-indicator/">Clipboard Indicator</a>：通知栏显示剪切板</li><li><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to Dock</a>: 任务栏配置</li><li><a href="https://extensions.gnome.org/extension/750/openweather/">OpenWeather</a>：天气信息</li><li><a href="https://extensions.gnome.org/extension/1319/gsconnect/">GSConnect</a>：手机电脑互联</li><li><a href="https://extensions.gnome.org/extension/3193/blur-my-shell/">Blur my Shell</a>：为 GNOME Shell 的不同部分添加模糊外观，包括顶部面板、破折号和概览</li><li><a href="https://extensions.gnome.org/extension/3843/just-perfection/">Just Perfection</a>：自定义设置 Dock、通知面板、图标，以及调整与<br>GNOME 交互方式等一系列的微调</li><li><a href="https://extensions.gnome.org/extension/28/gtile/">gTile</a>：改进原厂 gnome-shell 的窗口平铺功能，实现自定义分屏</li><li><a href="https://extensions.gnome.org/extension/5940/quick-settings-audio-panel/">Quick Settings Audio Panel</a>：在通知栏中显示音频控制面板</li></ul><h2 id="九、安装-Motrix-下载工具"><a href="#九、安装-Motrix-下载工具" class="headerlink" title="九、安装 Motrix 下载工具"></a>九、安装 Motrix 下载工具</h2><p><a href="https://motrix.app/download">Motrix</a>是一款 BT 下载工具</p><ol><li>下载后使用 <code>sudo dpkg -i Motrix_xxx.deb</code> 安装即可</li><li>建议配合<a href="https://chromewebstore.google.com/category/extensions">chrome 插件</a> Aria2 Explorer 一起使用，需要修改 Aria2<br>Explorer 中 Aria2-RPC-Server 的端口由 6800 改为 16800 即可</li></ol><h2 id="十、生成-SSH-密钥"><a href="#十、生成-SSH-密钥" class="headerlink" title="十、生成 SSH 密钥"></a>十、生成 SSH 密钥</h2><p>生成 ssh 密钥，按推荐优先级排序</p><ol><li>当前最推荐的 SSH 密钥类型，密钥短（256 位）、安全性高、性能优<br><code>ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</code></li><li>次选方案，安全性也很好<br><code>ssh-keygen -t ecdsa -b 521 -C &quot;your_email@example.com&quot;</code></li><li>传统选择，兼容性最好。需要足够长的密钥长度（至少 3072 位，推荐 4096）<br><code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>装机指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客文章页高级说明</title>
    <link href="/echo-silence/posts/2268ade3.html"/>
    <url>/echo-silence/posts/2268ade3.html</url>
    
    <content type="html"><![CDATA[<h2 id="文章-front-matter-说明"><a href="#文章-front-matter-说明" class="headerlink" title="文章 front-matter 说明"></a>文章 front-matter 说明</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs md">title: 标题<br>excerpt: 摘要<br>index<span class="hljs-emphasis">_img: 首页封面图</span><br><span class="hljs-emphasis">banner_</span>img: 文章页banner图<br>hide: false # 是否隐藏<br>archive: true # 隐藏文件在归档中也能看见，hide不能设置为true，否则仍不可见<br>sticky: 1 # 是否置顶（数字越大越靠前）<br>comment: &#x27;valine&#x27; # 是否开启评论（false/true,或者具体的评论插件：valine/waline）<br>abbrlink: 2268ade3 # 文章页永链<br>date: 2019-10-10 10:00:00 # 日期<br></code></pre></td></tr></table></figure><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>主题内置了脚注语法支持，可以在文章末尾自动生成带有锚点的脚注，该功能在主题配置中默认开启：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>脚注语法如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs md">这是一句话[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">这是对应的脚注</span><br></code></pre></td></tr></table></figure><p>更优雅的使用方式，是将脚注写在文末，比如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs md">正文<br><br><span class="hljs-section">## 参考</span><br><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span><br><br>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span><br></code></pre></td></tr></table></figure><p>当然你也可以通过修改上方配置项 <code>header</code> 来自动加入节标题，如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&lt;h2&gt;参考&lt;/h2&gt;&#x27;</span>  <span class="hljs-comment"># 等同于手动写 `## 参考`</span><br></code></pre></td></tr></table></figure><h2 id="Tag插件"><a href="#Tag插件" class="headerlink" title="Tag插件"></a>Tag插件</h2><p>可选标签：<br><code>&lt;p class=&quot;note note-primary&quot;&gt;primary&lt;/p&gt;</code> 或 <code>&#123;% note primary %&#125; primary &#123;% endnote %&#125;</code><br>可选 <code>label</code>：</p><ul><li>primary</li><li>secondary</li><li>default</li><li>info</li><li>success</li><li>warning</li><li>danger</li></ul><h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><p><code>&lt;span class=&quot;label label-primary&quot;&gt;text&lt;/span&gt;</code> 或 <code>&#123;% label secondary @text %&#125;</code><br>可选 <code>label</code>：</p><ul><li>primary</li><li>default</li><li>info</li><li>success</li><li>warning</li><li>danger</li></ul><h2 id="折叠块"><a href="#折叠块" class="headerlink" title="折叠块"></a>折叠块</h2><p>使用折叠块，可以折叠代码、图片、文字等任何内容，你可以在 markdown 中按如下格式：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% fold info @title %&#125;<br>需要折叠的一段内容，支持 markdown<br>&#123;% endfold %&#125;<br></code></pre></td></tr></table></figure><p>info: 和行内标签类似的可选参数 title: 折叠块上的标题</p><h2 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h2><p>在 <code>markdown</code> 中加入如下的代码来使用 Checkbox：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% cb text, checked?, incline? %&#125;<br></code></pre></td></tr></table></figure><ul><li>text：显示的文字</li><li>checked：默认是否已勾选，默认 false</li><li>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</li></ul><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>你可以在 markdown 中加入如下的代码来使用 Button：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% btn url, text, title %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>url：跳转链接</li><li>text：显示的文字</li><li>title：鼠标悬停时显示的文字（可选）</li></ul><h2 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h2><p>如果想把多张图片按一定布局组合显示，你可以在 markdown 中按如下格式：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% gi total n1-n2-... %&#125;<br>![](<span class="hljs-link">url</span>)<br>![](<span class="hljs-link">url</span>)<br>![](<span class="hljs-link">url</span>)<br>![](<span class="hljs-link">url</span>)<br>![](<span class="hljs-link">url</span>)<br>&#123;% endgi %&#125;<br></code></pre></td></tr></table></figure><p><code>total</code>：图片总数量，对应中间包含的图片 <code>url</code> 数量<br><code>n1-n2-...</code>：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 <code>total</code>，否则按默认样式</p><p>例如：<code>&#123;% gi 5 3-2 %&#125;</code> 示例，代表共 5 张图，第一行 3 张图，第二行 2 张图。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
